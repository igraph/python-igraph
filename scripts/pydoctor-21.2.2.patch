diff --git a/pydoctor/astbuilder.py b/pydoctor/astbuilder.py
index 6b274c9..393ddab 100644
--- a/pydoctor/astbuilder.py
+++ b/pydoctor/astbuilder.py
@@ -188,7 +188,7 @@ class ModuleVistor(ast.NodeVisitor):
             self.newAttr = None
 
     def visit_Module(self, node: ast.Module) -> None:
-        assert self.module.docstring is None
+        # assert self.module.docstring is None
 
         self.builder.push(self.module, 0)
         if len(node.body) > 0 and isinstance(node.body[0], ast.Expr) and isinstance(node.body[0].value, ast.Str):
diff --git a/pydoctor/epydoc2stan.py b/pydoctor/epydoc2stan.py
index 1b418ae..841c773 100644
--- a/pydoctor/epydoc2stan.py
+++ b/pydoctor/epydoc2stan.py
@@ -191,6 +191,11 @@ class _EpydocLinker(DocstringLinker):
             target = src.resolveName(identifier)
             if target is not None:
                 return target
+            if isinstance(src, model.Class):
+                for base in src.allbases():
+                    target = base.resolveName(identifier)
+                    if target is not None:
+                        return target
             src = src.parent
 
         # Walk up the object tree again and see if 'identifier' refers to an
@@ -528,7 +533,7 @@ class FieldHandler:
 
     def handleUnknownField(self, field: Field) -> None:
         name = field.tag
-        field.report(f"Unknown field '{name}'" )
+        # field.report(f"Unknown field '{name}'" )
         self.unknowns[name].append(FieldDesc(name=field.arg, body=field.format()))
 
     def handle(self, field: Field) -> None:
diff --git a/pydoctor/model.py b/pydoctor/model.py
index d233639..a14a4df 100644
--- a/pydoctor/model.py
+++ b/pydoctor/model.py
@@ -14,7 +14,7 @@ import platform
 import sys
 import types
 from enum import Enum
-from inspect import Signature
+from inspect import signature, Signature
 from optparse import Values
 from pathlib import Path
 from typing import (
@@ -514,7 +514,8 @@ class Function(Inheritable):
     is_async: bool
     annotations: Mapping[str, Optional[ast.expr]]
     decorators: Optional[Sequence[ast.expr]]
-    signature: Signature
+    signature: Optional[Signature]
+    text_signature: str = ""
 
     def setup(self) -> None:
         super().setup()
@@ -776,15 +777,24 @@ class System:
 
     def _introspectThing(self, thing: object, parent: Documentable, parentMod: _ModuleT) -> None:
         for k, v in thing.__dict__.items():
-            if (isinstance(v, (types.BuiltinFunctionType, types.FunctionType))
+            # TODO(ntamas): MethodDescriptorType and ClassMethodDescriptorType are Python 3.7 only.
+            if (isinstance(v, (types.BuiltinFunctionType, types.FunctionType, types.MethodDescriptorType, types.ClassMethodDescriptorType))
                     # In PyPy 7.3.1, functions from extensions are not
                     # instances of the above abstract types.
-                    or v.__class__.__name__ == 'builtin_function_or_method'):
+                    or (hasattr(v, "__class__") and v.__class__.__name__ == 'builtin_function_or_method')):
                 f = self.Function(self, k, parent)
                 f.parentMod = parentMod
                 f.docstring = v.__doc__
                 f.decorators = None
-                f.signature = Signature()
+                try:
+                    f.signature = signature(v)
+                except Exception:
+                    f.text_signature = (getattr(v, "__text_signature__") or "") + " (INVALID)"
+                    f.signature = None
+                f.is_async = False
+                f.annotations = {
+                    name: None for name in (f.signature.parameters if f.signature else {})
+                }
                 self.addObject(f)
             elif isinstance(v, type):
                 c = self.Class(self, k, parent)
@@ -912,7 +922,8 @@ class System:
             mod.state = ProcessingState.PROCESSED
             head = self.processing_modules.pop()
             assert head == mod.fullName()
-        self.unprocessed_modules.remove(mod)
+        if mod in self.unprocessed_modules:
+            self.unprocessed_modules.remove(mod)
         self.progress(
             'process',
             self.module_count - len(self.unprocessed_modules),
diff --git a/pydoctor/templatewriter/pages/__init__.py b/pydoctor/templatewriter/pages/__init__.py
index e5f4050..3d326b3 100644
--- a/pydoctor/templatewriter/pages/__init__.py
+++ b/pydoctor/templatewriter/pages/__init__.py
@@ -49,7 +49,7 @@ def format_decorators(obj: Union[model.Function, model.Attribute]) -> Iterator[A
 
 def signature(function: model.Function) -> str:
     """Return a nicely-formatted source-like function signature."""
-    return str(function.signature)
+    return str(function.signature) if function.signature else function.text_signature or "(...)"
 
 class DocGetter:
     """L{epydoc2stan} bridge."""
diff --git a/pydoctor/templates/common.html b/pydoctor/templates/common.html
index e5f4050..3d326b3 100644
--- a/pydoctor/templates/common.html
+++ b/pydoctor/templates/common.html
@@ -63,7 +63,7 @@
       </div>
       <address>
         <a href="index.html">API Documentation</a> for <t:slot name="project">Some
-          Project</t:slot>, generated by <a href="https://github.com/twisted/pydoctor/">pydoctor</a> <t:slot name="version" /> at <t:slot name="buildtime">some time</t:slot>.
+          Project</t:slot>, generated by <a href="https://github.com/twisted/pydoctor/">pydoctor</a> <t:slot name="version" />.
       </address>
 
     </div>
diff --git a/pydoctor/templatewriter/summary.py b/pydoctor/templatewriter/summary.py
index e5f4050..3d326b3 100644
--- a/pydoctor/templatewriter/summary.py
+++ b/pydoctor/templatewriter/summary.py
@@ -22,7 +22,7 @@
         return r
     ul = tags.ul()
     for m in sorted(contents, key=lambda m:m.fullName()):
-        ul(moduleSummary(m, page_url))
+        ul(moduleSummary(m, page_url), "\n")
     return r(ul)
 
 def _lckey(x):
@@ -45,6 +45,7 @@
         r = []
         for o in self.system.rootobjects:
             r.append(moduleSummary(o, self.filename))
+            r.append("\n")
         return tag.clear()(r)
     @renderer
     def heading(self, request, tag):
@@ -105,7 +106,7 @@
     if len(scs) > 0:
         ul = tags.ul()
         for sc in sorted(scs, key=_lckey):
-            ul(subclassesFrom(hostsystem, sc, anchors, page_url))
+            ul(subclassesFrom(hostsystem, sc, anchors, page_url), "\n")
         r(ul)
     return r
 
@@ -136,9 +137,10 @@
                 if o:
                     ul = tags.ul()
                     for sc in sorted(o, key=_lckey):
-                        ul(subclassesFrom(self.system, sc, anchors, self.filename))
+                        ul(subclassesFrom(self.system, sc, anchors, self.filename), "\n")
                     item(ul)
                 t(item)
+            t("\n")
         return t
 
     @renderer
